# Form implementation generated from reading ui file 'App_Second_Window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginInterface.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


# from curses import ERR
# from pickle import TRUE
# from tkinter import Button


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtGui import *
import sys
import os
import subprocess
from os import *


class StrikeOutDelegate(QtWidgets.QStyledItemDelegate):
    def paint(self, painter, option, index):
        QtWidgets.QStyledItemDelegate.paint(self, painter, option, index)
        if index.data(QtCore.Qt.DecorationRole) == QtCore.Qt.Checked:
            rect = option.rect
            pen = QtGui.QPen(QtGui.QColor(255, 0, 0))
            pen.setStyle(QtCore.Qt.SolidLine)
            pen.setWidth(2)
            painter.setPen(pen)
            painter.drawLine(rect.topLeft(), rect.bottomRight())


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1102, 854)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)

        # Translucent Background for the Window
        MainWindow.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)

        # Make the Window frameless
        MainWindow.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)

        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(40, 20, 1021, 929))
        self.widget.setStyleSheet(
            "QPushButton#pushButton{\n"
            "    background-color: qlinegradient(spread:pad, x1:0, y1:0,505682, x2:1, y2:0.477, stop:0 rgba(20, 47, 78, 219), stop:1 rgba(85, 98, 112, 226));\n"
            "    color:rgba(255, 255, 255, 210);\n"
            "    border-radius:5px;\n"
            "}\n"
            "QPushButton#pushButton:hover{\n"
            "    background-color: qlinegradient(spread:pad, x1:0, y1:0,505682, x2:1, y2:0.477, stop:0 rgba(40, 67, 98, 219), stop:1 rgba(105, 118, 132, 226));\n"
            "}\n"
            "QPushButton#pushButton:pressed{\n"
            "    padding-left:5px;\n"
            "    padding:top;\n"
            "    background-color:rgba(105, 118, 132, 200);\n"
            "}\n"
            "QPushButton#pushButton_2, #pushButton_3, #pushButton_4, #pushButton_6, #pushButton_7{\n"
            "    background-color: rgba(0, 0, 0, 0);\n"
            "    color:rgba(85, 98, 112, 255);\n"
            "}\n"
            "QPushButton#pushButton_2:hover, #pushButton_3:hover, #pushButton_4:hover, #pushButton_6:hover, #pushButton_7:hover{\n"
            "    color: rgba(155, 168, 182, 200);\n"
            "}\n"
            "QPushButton#pushButton_2:pressed, #pushButton_3:pressed, #pushButton_4:pressed, #pushButton_6:pressed, #pushButton_7:pressed{\n"
            "    padding-left:5px;\n"
            "    padding:top;\n"
            "    background-color:rgba(115, 128, 142, 255);\n"
            "}"
        )
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(parent=self.widget)
        self.label.setGeometry(QtCore.QRect(40, 40, 940, 780))
        self.label.setStyleSheet(
            "border-image: url(pexels-pixabay-355288.jpg);\n" "border-radius:20px;\n" ""
        )
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.widget)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 970, 820))
        self.label_2.setStyleSheet(
            "background-color: qlinegradient(spread:pad, x1:0, y1:0, x2:0, y2:0.715909, stop:0rgba(0, 0, 0, 9), stop:0.375 rgba(0, 0, 0, 50), stop:0.835227 rgba(0, 0, 0, 75));\n"
            "border-radius:20px;\n"
            ""
        )
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.widget)
        self.label_3.setGeometry(QtCore.QRect(70, 70, 880, 720))
        self.label_3.setStyleSheet(
            "background: rgba(0,0,0,100);\n" "border-radius : 15px"
        )
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.widget)
        self.label_4.setGeometry(QtCore.QRect(470, 100, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(27)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color:rgba(255, 255, 255, 210);\n" "")
        self.label_4.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.label_4.setScaledContents(False)
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_3.setGeometry(QtCore.QRect(900, 90, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(21)
        font.setBold(True)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.listWidget = QtWidgets.QListWidget(parent=self.widget)
        self.listWidget.setGeometry(QtCore.QRect(130, 390, 771, 421))
        self.listWidget.setStyleSheet(
            "background-color:rgba(0, 0, 0, 0);\n"
            "border:none;\n"
            "border-bottom:2px solid rgba(105, 118, 132, 255);\n"
            "color:rgba(255, 255, 255, 230);\n"
            "padding-bottom:7px;"
        )
        self.listWidget.setObjectName("listWidget")
        # self.listWidget.setWindowFlag(QtCore.Qt.ItemFlag.ItemIsUserCheckable)

        # QListWidgetItem.setFlags(QtCore.Qt.ItemFlag.ItemIsUserCheckable)

        # Adding checkboxes to the ListViewWidget

        """for todo in range(self.listWidget.count()):
            item = QListWidgetItem(todo)
            item.setFlags(item.flags() | QtCore.Qt.ItemFlag.ItemIsUserCheckable)
            item.setCheckState(QtCore.Qt.Unchecked)"""

        self.pushButton = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton.setGeometry(QtCore.QRect(130, 190, 231, 51))
        self.pushButton.setStyleSheet(
            "QPushButton#pushButton{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 63, 147, 255), stop:1 rgba(219, 147, 232, 255));\n"
            "    color:rgba(255, 255, 255, 210);\n"
            "    border-radius:5px;\n"
            "}\n"
            "QPushButton#pushButton:hover{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 83, 167, 255), stop:1 rgba(239, 167, 252, 255));\n"
            "}\n"
            "\n"
            ""
        )
        self.pushButton.setObjectName("pushButton")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_4.setGeometry(QtCore.QRect(400, 190, 241, 51))
        self.pushButton_4.setStyleSheet(
            "QPushButton#pushButton_4{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 63, 147, 255), stop:1 rgba(219, 147, 232, 255));\n"
            "    color:rgba(255, 255, 255, 210);\n"
            "    border-radius:5px;\n"
            "}\n"
            "QPushButton#pushButton_4:hover{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 83, 167, 255), stop:1 rgba(239, 167, 252, 255));\n"
            "}\n"
            "\n"
            ""
        )
        self.pushButton_4.setObjectName("pushButton_4")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.widget)
        self.lineEdit.setGeometry(QtCore.QRect(130, 270, 551, 41))
        self.lineEdit.setText("")
        self.lineEdit.setPlaceholderText("Enter the Task")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setStyleSheet(
            "background-color:rgba(0, 0, 0, 0);\n"
            "border:none;\n"
            "border-bottom:2px solid rgba(105, 118, 132, 255);\n"
            "color:rgba(255, 255, 255, 230);\n"
            "padding-bottom:7px;"
        )
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.widget)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 330, 771, 41))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setPlaceholderText("Enter the description of the task")
        self.lineEdit_2.setObjectName("lineEdit")
        self.lineEdit_2.setStyleSheet(
            "background-color:rgba(0, 0, 0, 0);\n"
            "border:none;\n"
            "border-bottom:2px solid rgba(105, 118, 132, 255);\n"
            "color:rgba(255, 255, 255, 230);\n"
            "padding-bottom:7px;"
        )
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.widget)
        self.pushButton_5.setGeometry(QtCore.QRect(680, 190, 221, 51))
        self.pushButton_5.setStyleSheet(
            "QPushButton#pushButton_5{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 63, 147, 255), stop:1 rgba(219, 147, 232, 255));\n"
            "    color:rgba(255, 255, 255, 210);\n"
            "    border-radius:5px;\n"
            "}\n"
            "QPushButton#pushButton_5:hover{\n"
            "    background-color: qlineargradient(spread:pad, x1:0.364, y1:1, x2:1, y2:1, stop:0 rgba(122, 83, 167, 255), stop:1 rgba(239, 167, 252, 255));\n"
            "}\n"
            "\n"
            ""
        )
        self.pushButton_5.setObjectName("pushButton_5")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(parent=self.widget)
        self.dateTimeEdit.setGeometry(QtCore.QRect(710, 270, 194, 41))
        self.dateTimeEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.dateTimeEdit.setDateTime(QDateTime.currentDateTime())
        self.dateTimeEdit.setStyleSheet(
            "background-color:rgba(0, 0, 0, 0);\n"
            "border:none;\n"
            "border-bottom:2px solid rgba(105, 118, 132, 255);\n"
            "color:rgba(255, 255, 255, 230);\n"
            "padding-bottom:7px;"
        )
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1102, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # Adding items onto the list
    """def add_item(self):
        global input_to_do

        # Receive the text from the input lineEdit
        input_to_do = self.lineEdit.text()
        # Receives the date and the time.
        time = self.dateTimeEdit.dateTime()

        # Takes task as user input. It is stored as item
        item = QtWidgets.QListWidgetItem(input_to_do)

        # Adding a checkbox before the task so user can mark it as done.
        item.setFlags(item.flags() | QtCore.Qt.ItemFlag.ItemIsUserCheckable)

        # Checkbox needs to be set as unchecked when the task is added into the listViewWidget
        item.setCheckState(Qt.CheckState.Unchecked)

        # Adds the item into the listviewWidget
        self.listWidget.addItem(item)"""

    def add_item(self):
        global input_to_do

        # Receive the text from the input lineEdit
        input_to_do = self.lineEdit.text()
        # Receives the date and the time.
        task_datetime = self.dateTimeEdit.dateTime()
        # Receives the description of the task from the linEdit2
        description_task = self.lineEdit_2.text()

        # Concatinates the task name and the time and the description of the task
        item1 = f"{input_to_do} - {task_datetime.toString('dd-MM-yyyy hh:mm A')} {chr(10)} {description_task}"
        item = QtWidgets.QListWidgetItem(item1)

        # Adding a checkbox before the task so user can mark it as done.
        item.setFlags(item.flags() | QtCore.Qt.ItemFlag.ItemIsUserCheckable)

        # Checkbox needs to be set as unchecked when the task is added into the listViewWidget
        item.setCheckState(Qt.CheckState.Unchecked)

        # Adds the item into the listviewWidget
        self.listWidget.addItem(item)

    # Clears all the items from the list
    def clear_item(self):
        self.listWidget.clear()

    # Delete the item form the list
    def delete_item(self):
        # Grab the row selected by the user
        clicked = self.listWidget.currentRow()

        # Delete the row
        self.listWidget.takeItem(clicked)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_4.setText(_translate("MainWindow", "Tasks"))
        self.pushButton_3.setText(_translate("MainWindow", "X"))
        self.pushButton_3.clicked.connect(QCoreApplication.instance().quit)
        self.pushButton.setText(_translate("MainWindow", "Add a task "))
        self.pushButton.clicked.connect(self.add_item)
        self.pushButton_4.setText(_translate("MainWindow", "Delete Task "))
        self.pushButton_4.clicked.connect(self.delete_item)
        self.pushButton_5.setText(_translate("MainWindow", "Clear All tasks"))
        self.pushButton_5.clicked.connect(self.clear_item)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
